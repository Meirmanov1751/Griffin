import React from 'react';
import {useParams} from "react-router-dom";
import {useSelector} from "react-redux";
import {useEffect, useRef, useState} from "react";
import instance from "../../../../store/api";
import Logs from "./tests/logs/logs";

const Pcopt = () => {
    var {id} = useParams()
    let pentestState = useSelector(state => state.pentests.pentest)
    let [pentetsForProps, setPentetsForProps] = useState({})

    async function getPentest() {
        try {
            const response = await instance.get('api/pentesting/pentesting/' + id + '/');
            // Обработка успешного ответа от сервера
            setPentetsForProps(response.data)
            console.log(response.data);
            if (response.data.PCOPT) {
                getAuditInitiation(response.data.PCOPT)
            }

        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }

    useEffect(() => {
        if (id) {
            getPentest()
        }
    }, [])


    const inputs = useRef(null);

    const [PCOPTData, setPCOPTData] = useState({
        console_logs: '',
        buffer: '',
        code_issues: '',
        list_of_tech: '',
        validation: '',
    });

    async function getAuditInitiation(audit) {
        try {
            const response = await instance.get('api/PCOPT/' + audit.id + '/');
            // Обработка успешного ответа от сервера
            setPCOPTData(response.data)

            console.log(response.data);

        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }


    const PCOPTSubmit = async (e) => {
        e.preventDefault();

        if (!pentetsForProps.PCOPT) {
            try {
                const response = await instance.post('api/PCOPT/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, PCOPTData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
        } else {
            try {
                const response = await instance.put('api/PCOPT/' + pentetsForProps.PCOPT.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, PCOPTData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
        }

        console.log(PCOPTData)
    };

    const PCOPTChange = (e) => {
        const {name, value} = e.target;
        setPCOPTData({
            ...PCOPTData,
            [name]: value,
        });
    };

    ///////////////////////////////////////////////////////////////////////

    return (
        <div>
            <section id="">
                <h5 className={"osint_title"}>Тест на проникновение, ориентированный на программный код <i
                    className="fa fa-balance-scale"></i>:</h5>
                <details className={"details-main"} open>
                    <summary className={"summary-main"}>
                        <i className="fa fa-sliders"></i>
                    </summary>
                    <label className={"label-textarea"}>Логи:</label>
                    <textarea
                        className={"Osint_textarea"}
                        type={"search"}
                        name="console_logs"
                        style={{height: '30vh'}}
                        ref={inputs}
                        value={PCOPTData.console_logs}
                        onChange={PCOPTChange}
                    />

                    <label className={"label-textarea"}>Буффер:</label>
                    <textarea
                        className={"Osint_textarea"}
                        type={"search"}
                        name="buffer"
                        ref={inputs}
                        value={PCOPTData.buffer}
                        onChange={PCOPTChange}
                    />

                    <label className={"label-textarea"}>Уязвимости в коде:</label>
                    <textarea
                        className={"Osint_textarea"}
                        type={"search"}
                        name="code_issues"
                        ref={inputs}
                        value={PCOPTData.code_issues}
                        onChange={PCOPTChange}
                    />

                    <label className={"label-textarea"}>Стек технологии:</label>
                    <textarea
                        className={"Osint_textarea"}
                        type={"search"}
                        name="list_of_tech"
                        ref={inputs}
                        value={PCOPTData.list_of_tech}
                        onChange={PCOPTChange}
                    />

                    <label className={"label-textarea"}>Валидация:</label>
                    <textarea
                        className={"Osint_textarea"}
                        type={"search"}
                        name="validation"
                        ref={inputs}
                        value={PCOPTData.validation}
                        onChange={PCOPTChange}
                    />
                    <button className={"metodology_sub"} onClick={PCOPTSubmit}>Сохранить</button>
                </details>
            </section>
        </div>
    );
};

export default Pcopt;