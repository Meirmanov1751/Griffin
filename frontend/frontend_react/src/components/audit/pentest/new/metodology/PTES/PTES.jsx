import React, {useEffect, useRef, useState} from 'react';
import instance from "../../../../../../store/api";
import {useParams} from "react-router-dom";
import {useSelector} from "react-redux";

const PTES = () => {
    var {id} = useParams()
    let pentestState = useSelector(state => state.pentests.pentest)
    let [pentetsForProps, setPentetsForProps] = useState({})

    async function getPentest() {
        try {
            const response = await instance.get('api/pentesting/pentesting/' + id + '/');
            // Обработка успешного ответа от сервера
            setPentetsForProps(response.data)
            console.log(response.data);
            if (response.data.PTES_AuditInitiation) {
                getAuditInitiation(response.data.PTES_AuditInitiation)
            }
            if (response.data.PTES_InformationGathering) {
                getInformationGathering(response.data.PTES_InformationGathering)
            }
            if (response.data.PTES_VulnerabilityAnalysis) {
                getVulnerabilityAnalysis(response.data.PTES_VulnerabilityAnalysis)
            }
            if (response.data.PTES_AccessMaintenance) {
                getAccessMaintenance(response.data.PTES_AccessMaintenance)
            }
            if (response.data.PTES_DataAnalysisAndDocumentation) {
                getDataAnalysisAndDocumentation(response.data.PTES_DataAnalysisAndDocumentation)
            }
            if (response.data.PTES_AuditCompletion) {
                getAuditCompletion(response.data.PTES_AuditCompletion)
            }
            if (response.data.PTES_AuditPreparationAndPlanning) {
                getAuditPreparationAndPlanning(response.data.PTES_AuditPreparationAndPlanning)
            }
            if (response.data.PTES_AuditExecutionAndTesting) {
                getAuditExecutionAndTesting(response.data.PTES_AuditExecutionAndTesting)
            }
            if (response.data.PTES_ResultsAnalysisAndReporting) {
                getResultsAnalysisAndReporting(response.data.PTES_ResultsAnalysisAndReporting)
            }

        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }

    useEffect(() => {
        if (id) {
            getPentest()
        }
    }, [])


    const inputs = useRef(null);

    const [AuditInitiationData, setAuditInitiationData] = useState({
        audit_objectives: '',
        methodology_and_tools: null,
        audit_schedule: '',
    });

    async function getAuditInitiation(audit) {
        try {
            const response = await instance.get('api/PTES/AuditInitiation/' + audit.id + '/');
            // Обработка успешного ответа от сервера
            setAuditInitiationData(response.data)


        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }


    const AuditInitiationSubmit = async (e) => {
        e.preventDefault();
        if (!pentetsForProps.PTES_AuditInitiation) {
            try {
                const response = await instance.post('api/PTES/AuditInitiation/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, AuditInitiationData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
        } else {
            try {
                const response = await instance.put('api/PTES/AuditInitiation/' + pentetsForProps.PTES_AuditInitiation.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, AuditInitiationData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
        }

        console.log(AuditInitiationData)
    };

    const AuditInitiationChange = (e) => {
        const {name, value} = e.target;
        setAuditInitiationData({
            ...AuditInitiationData,
            [name]: value,
        });
    };

    ///////////////////////////////////////////////////////////////////////

    const [InformationGatheringData, setInformationGatheringData] = useState({
        asset_search_and_scanning: '',
        port_and_service_analysis: null,
        publicly_available_documentation: '',
    });

    async function getInformationGathering(audit) {
        try {
            const response = await instance.get('api/PTES/InformationGathering/' + audit.id + '/');
            // Обработка успешного ответа от сервера
            setInformationGatheringData(response.data)
            debugger
            console.log(response.data);

        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }

    const InformationGatheringSubmit = async (e) => {
        e.preventDefault();
        if (pentetsForProps.PTES_InformationGathering) {
            try {
                const response = await instance.put('api/PTES/InformationGathering/' + pentetsForProps.PTES_InformationGathering.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, InformationGatheringData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
        } else {
            try {
                const response = await instance.post('api/PTES/InformationGathering/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, InformationGatheringData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
        }
        console.log(InformationGatheringData)
    };

    const [CheckOpenPortData, setCheckOpenPortData] = useState("")
    const inputForPortCheck = useRef(null);

    function CheckOpenPortHandler() {
        if (inputForPortCheck.current) {

            instance.get('pentesting/CheckOpenPort/?url=' + inputForPortCheck.current.value)
                .then(res => {
                    setCheckOpenPortData(res);
                })

        }

    }

    const InformationGatheringChange = (e) => {
        const {name, value} = e.target;
        setInformationGatheringData({
            ...InformationGatheringData,
            [name]: value,
        });
    };

    ///////////////////////////////////////////////////////////////////////

    const [VulnerabilityAnalysisData, setVulnerabilityAnalysisData] = useState({
        vulnerability_search: '',
        exploitation_attempts: null,
        system_reaction_evaluation: '',
    });

    async function getVulnerabilityAnalysis(audit) {
        try {
            const response = await instance.get('api/PTES/VulnerabilityAnalysis/' + audit.id + '/');
            // Обработка успешного ответа от сервера
            setVulnerabilityAnalysisData(response.data)


        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }

    const VulnerabilityAnalysisSubmit = async (e) => {
        e.preventDefault();
        if (pentetsForProps.PTES_VulnerabilityAnalysis) {
            try {
                const response = await instance.put('api/PTES/VulnerabilityAnalysis/' + pentetsForProps.PTES_VulnerabilityAnalysis.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, VulnerabilityAnalysisData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
        } else {
            try {
                const response = await instance.post('api/PTES/VulnerabilityAnalysis/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, VulnerabilityAnalysisData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
            console.log(VulnerabilityAnalysisData)
        }
    }

    const VulnerabilityAnalysisChange = (e) => {
        const {name, value} = e.target;
        setVulnerabilityAnalysisData({
            ...VulnerabilityAnalysisData,
            [name]: value,
        });
    };

    ///////////////////////////////////////////////////////////////////////

    const [AccessMaintenanceData, setAccessMaintenanceData] = useState({
        access_maintenance_mechanisms: '',
        attacker_activity_masking: null,
        activity_monitoring_and_access_to_resources: '',
    });

    async function getAccessMaintenance(audit) {
        try {
            const response = await instance.get('api/PTES/AccessMaintenance/' + audit.id + '/');
            // Обработка успешного ответа от сервера
            setAccessMaintenanceData(response.data)
            debugger
            console.log(response.data);

        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }

    const AccessMaintenanceSubmit = async (e) => {
        e.preventDefault();
        if (pentetsForProps.PTES_AccessMaintenance) {
            try {
                const response = await instance.put('api/PTES/AccessMaintenance/' + pentetsForProps.PTES_AccessMaintenance.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, AccessMaintenanceData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
        } else {
            try {
                const response = await instance.post('api/PTES/AccessMaintenance/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, AccessMaintenanceData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
            console.log(AccessMaintenanceData)
        }
    }

    const AccessMaintenanceChange = (e) => {
        const {name, value} = e.target;
        setAccessMaintenanceData({
            ...AccessMaintenanceData,
            [name]: value,
        });
    };

    ///////////////////////////////////////////////////////////////////////

    const [DataAnalysisAndDocumentationData, setDataAnalysisAndDocumentationData] = useState({
        audit_steps_record: '',
        issue_description_and_remediation_recommendations: null,
        audit_report: '',
    });

    async function getDataAnalysisAndDocumentation(audit) {
        try {
            const response = await instance.get('api/PTES/DataAnalysisAndDocumentation/' + audit.id + '/');
            // Обработка успешного ответа от сервера
            setDataAnalysisAndDocumentationData(response.data)

            console.log(response.data);

        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }

    const DataAnalysisAndDocumentationSubmit = async (e) => {
        e.preventDefault();
        if (pentetsForProps.PTES_DataAnalysisAndDocumentation) {
            try {
                const response = await instance.put('api/PTES/DataAnalysisAndDocumentation/' + pentetsForProps.PTES_DataAnalysisAndDocumentation.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, DataAnalysisAndDocumentationData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
        } else {
            try {
                const response = await instance.post('api/PTES/DataAnalysisAndDocumentation/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, DataAnalysisAndDocumentationData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
            console.log(DataAnalysisAndDocumentationData)
        }
    }

    const DataAnalysisAndDocumentationChange = (e) => {
        const {name, value} = e.target;
        setDataAnalysisAndDocumentationData({
            ...DataAnalysisAndDocumentationData,
            [name]: value,
        });
    };

    ///////////////////////////////////////////////////////////////////////

    const [AuditCompletionData, setAuditCompletionData] = useState({
        client_meeting: '',
        audit_report_delivery: null,
        project_closure: '',
    });

    async function getAuditCompletion(audit) {
        try {
            const response = await instance.get('api/PTES/AuditCompletion/' + audit.id + '/');
            // Обработка успешного ответа от сервера
            setAuditCompletionData(response.data)

            console.log(response.data);

        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }

    const AuditCompletionSubmit = async (e) => {
        e.preventDefault();
        if (pentetsForProps.PTES_AuditCompletion) {
            try {
                const response = await instance.put('api/PTES/AuditCompletion/' + pentetsForProps.PTES_AuditCompletion.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, AuditCompletionData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
        } else {
            try {
                const response = await instance.post('api/PTES/AuditCompletion/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, AuditCompletionData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
            console.log(AuditCompletionData)
        }
    }

    const AuditCompletionChange = (e) => {
        const {name, value} = e.target;
        setAuditCompletionData({
            ...AuditCompletionData,
            [name]: value,
        });
    };

    ///////////////////////////////////////////////////////////////////////

    const [AuditPreparationAndPlanningData, setAuditPreparationAndPlanningData] = useState({
        audit_objectives_and_scope: '',
        audit_plan: null,
        audit_team_and_roles: '',
    });

    async function getAuditPreparationAndPlanning(audit) {
        try {
            const response = await instance.get('api/PTES/AuditPreparationAndPlanning/' + audit.id + '/');
            // Обработка успешного ответа от сервера
            setAuditPreparationAndPlanningData(response.data)

            console.log(response.data);

        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }

    const AuditPreparationAndPlanningSubmit = async (e) => {
        e.preventDefault();
        if (pentetsForProps.PTES_AuditPreparationAndPlanning) {
            try {
                const response = await instance.put('api/PTES/AuditPreparationAndPlanning/' + pentetsForProps.PTES_AuditPreparationAndPlanning.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, AuditPreparationAndPlanningData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
        } else {
            try {
                const response = await instance.post('api/PTES/AuditPreparationAndPlanning/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, AuditPreparationAndPlanningData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
            console.log(AuditPreparationAndPlanningData)
        }
    }

    const AuditPreparationAndPlanningChange = (e) => {
        const {name, value} = e.target;
        setAuditPreparationAndPlanningData({
            ...AuditPreparationAndPlanningData,
            [name]: value,
        });
    };

    ///////////////////////////////////////////////////////////////////////

    const [AuditExecutionAndTestingData, setAuditExecutionAndTestingData] = useState({
        penetration_testing: '',
        vulnerability_data_collection_and_analysis: null,
        security_policy_testing: '',
    });

    async function getAuditExecutionAndTesting(audit) {
        try {
            const response = await instance.get('api/PTES/AuditExecutionAndTesting/' + audit.id + '/');
            // Обработка успешного ответа от сервера
            setAuditExecutionAndTestingData(response.data)

            console.log(response.data);

        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }

    const AuditExecutionAndTestingSubmit = async (e) => {
        e.preventDefault();
        if (pentetsForProps.PTES_AuditExecutionAndTesting) {
            try {
                const response = await instance.put('api/PTES/AuditExecutionAndTesting/' + pentetsForProps.PTES_AuditExecutionAndTesting.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, AuditExecutionAndTestingData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
        } else {
            try {
                const response = await instance.post('api/PTES/AuditExecutionAndTesting/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, AuditExecutionAndTestingData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
            console.log(AuditExecutionAndTestingData)
        }
    }

    const AuditExecutionAndTestingChange = (e) => {
        const {name, value} = e.target;
        setAuditExecutionAndTestingData({
            ...AuditExecutionAndTestingData,
            [name]: value,
        });
    };

    ///////////////////////////////////////////////////////////////////////

    const [ResultsAnalysisAndReportingData, setResultsAnalysisAndReportingData] = useState({
        data_processing: '',
        risk_assessment: null,
        detailed_audit_report_with_recommendations: '',
    });

    async function getResultsAnalysisAndReporting(audit) {
        try {
            const response = await instance.get('api/PTES/ResultsAnalysisAndReporting/' + audit.id + '/');
            // Обработка успешного ответа от сервера
            setResultsAnalysisAndReportingData(response.data)

            console.log(response.data);

        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }


    const ResultsAnalysisAndReportingSubmit = async (e) => {
        e.preventDefault();
        if (pentetsForProps.PTES_ResultsAnalysisAndReporting) {
            try {
                const response = await instance.put('api/PTES/ResultsAnalysisAndReporting/' + pentetsForProps.PTES_ResultsAnalysisAndReporting.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, ResultsAnalysisAndReportingData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
        } else {
            try {
                const response = await instance.post('api/PTES/ResultsAnalysisAndReporting/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, ResultsAnalysisAndReportingData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
            console.log(ResultsAnalysisAndReportingData)
        }
    }

    const ResultsAnalysisAndReportingChange = (e) => {
        const {name, value} = e.target;
        setResultsAnalysisAndReportingData({
            ...ResultsAnalysisAndReportingData,
            [name]: value,
        });
    };

    return (
        <section id="section2.1">
            <h1 className={"title-h2"}>PTES:</h1>

            <details className={"details-main"} open>
                <summary className={"summary-main"}>
                    <i className="fa fa-sliders"></i>
                </summary>
                <section id="section2.1.1">
                    <h2 className={"title-h2"}>1. Инициализация и согласование:</h2>
                    <details>
                        <summary>
                            <i class="fa fa-bars"></i>
                        </summary>
                        <label className={"label-textarea"}>Определение четких целей и ожиданий аудита:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="audit_objectives"
                            ref={inputs}
                            value={AuditInitiationData.audit_objectives}
                            onChange={AuditInitiationChange}
                        />

                        <label className={"label-textarea"}>Согласование методологии и инструментов, используемых во
                            время аудита.:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="methodology_and_tools"
                            ref={inputs}
                            value={AuditInitiationData.methodology_and_tools}
                            onChange={AuditInitiationChange}
                        />

                        <label className={"label-textarea"}>Установление расписания и сроков проведения аудита:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="audit_schedule"
                            ref={inputs}
                            value={AuditInitiationData.audit_schedule}
                            onChange={AuditInitiationChange}
                        />
                        <button className={"metodology_sub"} onClick={AuditInitiationSubmit}>Сохранить</button>
                    </details>
                </section>

                <section id="section2.1.2">
                    <h2 className={"title-h2"}>2. Сбор информации и разведка:</h2>
                    <details>
                        <summary>
                            <i class="fa fa-bars"></i>
                        </summary>
                        <label className={"label-textarea"}>Поиск и сканирование активов, включая сетевые узлы и
                            веб-ресурсы:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="asset_search_and_scanning"
                            ref={inputs}
                            value={InformationGatheringData.asset_search_and_scanning}
                            onChange={InformationGatheringChange}
                        />

                        <input
                            className={"input"}
                            type={"search"}
                            name="url"
                            ref={inputForPortCheck}
                            placeholder={"OSINT үшін URL мекенжайыңызды енгізіңіз"}
                        />
                        <a className={"submit--btn"} value={">"} onClick={CheckOpenPortHandler}>
                            <i className="fa fa-terminal" aria-hidden="true"></i>
                        </a>

                        <h3 className={"osint_subtitle"}>Ашық порттар:</h3>
                        {CheckOpenPortData.data && CheckOpenPortData.data.open_ports ?
                            <p className={"osint_info_text"}>Әзірлеушілер осы сайттағы деректерге қол жеткізуді жабуды
                                ұмытып
                                кетті.
                                порттар:</p> :
                            <p className={"osint_info_text"}>Бұл сайтта әзірлеушілер порттарға кіруді жабуды
                                ұмытпады</p>}
                        {CheckOpenPortData.data && CheckOpenPortData.data.open_ports ?
                            CheckOpenPortData.data.open_ports.map((e) => {
                                return (
                                    <div>
                                        <div className="code-block"><code>{JSON.stringify(e.text)}</code></div>
                                    </div>
                                )
                            })
                            : null}

                        <label className={"label-textarea"}>Анализ открытых портов и служб на целевых системах:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="port_and_service_analysis"
                            ref={inputs}
                            value={InformationGatheringData.port_and_service_analysis}
                            onChange={InformationGatheringChange}
                        />

                        <label className={"label-textarea"}> Исследование документации, доступной публично, связанной с
                            организацией:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="publicly_available_documentation"
                            ref={inputs}
                            value={InformationGatheringData.publicly_available_documentation}
                            onChange={InformationGatheringChange}
                        />

                        <button className={"metodology_sub"} onClick={InformationGatheringSubmit}>Сохранить</button>

                    </details>
                </section>

                <section id="section2.1.3">
                    <h2 className={"title-h2"}>3. Анализ уязвимостей и эксплуатация</h2>
                    <details>
                        <summary>
                            <i class="fa fa-bars"></i>
                        </summary>
                        <label className={"label-textarea"}>Поиск уязвимостей в приложениях и системах:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="vulnerability_search"
                            ref={inputs}
                            value={VulnerabilityAnalysisData.vulnerability_search}
                            onChange={VulnerabilityAnalysisChange}
                        />

                        <label className={"label-textarea"}> Попытка эксплуатации уязвимостей для получения
                            доступа:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="exploitation_attempts"
                            ref={inputs}
                            value={VulnerabilityAnalysisData.exploitation_attempts}
                            onChange={VulnerabilityAnalysisChange}
                        />

                        <label className={"label-textarea"}>Оценка реакции системы на атаки и проверка на возможность
                            расширения доступа:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="system_reaction_evaluation"
                            ref={inputs}
                            value={VulnerabilityAnalysisData.system_reaction_evaluation}
                            onChange={VulnerabilityAnalysisChange}
                        />

                        <button className={"metodology_sub"} onClick={VulnerabilityAnalysisSubmit}>Сохранить</button>
                    </details>
                </section>

                <section id="section2.1.4">
                    <h2 className={"title-h2"}>4. Поддержание доступа и персистентность</h2>
                    <details>
                        <summary>
                            <i class="fa fa-bars"></i>
                        </summary>
                        <label className={"label-textarea"}>Установка механизмов для поддержания доступа к системе после
                            успешной эксплуатации:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="access_maintenance_mechanisms"
                            ref={inputs}
                            value={AccessMaintenanceData.access_maintenance_mechanisms}
                            onChange={AccessMaintenanceChange}
                        />

                        <label className={"label-textarea"}>Маскировка деятельности атакующего для избегания
                            обнаружения:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="attacker_activity_masking"
                            ref={inputs}
                            value={AccessMaintenanceData.attacker_activity_masking}
                            onChange={AccessMaintenanceChange}
                        />

                        <label className={"label-textarea"}>Мониторинг активности и доступа к целевым ресурсам:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="activity_monitoring_and_access_to_resources"
                            ref={inputs}
                            value={AccessMaintenanceData.activity_monitoring_and_access_to_resources}
                            onChange={AccessMaintenanceChange}
                        />

                        <button className={"metodology_sub"} onClick={AccessMaintenanceSubmit}>Сохранить</button>
                    </details>
                </section>

                <section id="section2.1.5">
                    <h2 className={"title-h2"}>5. Анализ данных и документация</h2>
                    <details>
                        <summary>
                            <i class="fa fa-bars"></i>
                        </summary>
                        <label className={"label-textarea"}>Запись всех шагов аудита, включая найденные уязвимости и
                            эксплуатацию:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="audit_steps_record"
                            ref={inputs}
                            value={DataAnalysisAndDocumentationData.audit_steps_record}
                            onChange={DataAnalysisAndDocumentationChange}
                        />

                        <label className={"label-textarea"}>Создание документации с описанием обнаруженных проблем и
                            рекомендаций по устранению:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="issue_description_and_remediation_recommendations"
                            ref={inputs}
                            value={DataAnalysisAndDocumentationData.issue_description_and_remediation_recommendations}
                            onChange={DataAnalysisAndDocumentationChange}
                        />

                        <label className={"label-textarea"}> Формирование отчета о проведенном аудите с подробным
                            анализом результатов:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="audit_report"
                            ref={inputs}
                            value={DataAnalysisAndDocumentationData.audit_report}
                            onChange={DataAnalysisAndDocumentationChange}
                        />

                        <button className={"metodology_sub"} onClick={DataAnalysisAndDocumentationSubmit}>Сохранить
                        </button>
                    </details>
                </section>

                <section id="section2.1.6">
                    <h2 className={"title-h2"}>6. Завершение и передача результатов</h2>
                    <details>
                        <summary>
                            <i class="fa fa-bars"></i>
                        </summary>
                        <label className={"label-textarea"}>Проведение встречи с клиентом для обсуждения найденных
                            уязвимостей и рекомендаций:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="client_meeting"
                            ref={inputs}
                            value={AuditCompletionData.client_meeting}
                            onChange={AuditCompletionChange}
                        />

                        <label className={"label-textarea"}>Передача отчета о проведенном аудите и всех собранных данных
                            клиенту:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="audit_report_delivery"
                            ref={inputs}
                            value={AuditCompletionData.audit_report_delivery}
                            onChange={AuditCompletionChange}
                        />

                        <label className={"label-textarea"}>Завершение проекта и закрытие аудита:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="project_closure"
                            ref={inputs}
                            value={AuditCompletionData.project_closure}
                            onChange={AuditCompletionChange}
                        />

                        <button className={"metodology_sub"} onClick={AuditCompletionSubmit}>Сохранить</button>
                    </details>
                </section>

                <section id="section2.1.7">
                    <h2 className={"title-h2"}>7. Подготовка и планирование аудита</h2>
                    <details>
                        <summary>
                            <i class="fa fa-bars"></i>
                        </summary>
                        <label className={"label-textarea"}>Определение целей и объема аудита на основе потребностей
                            клиента:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="audit_objectives_and_scope"
                            ref={inputs}
                            value={AuditPreparationAndPlanningData.audit_objectives_and_scope}
                            onChange={AuditPreparationAndPlanningChange}
                        />

                        <label className={"label-textarea"}>Разработка детального плана аудита, включая выбор
                            методологии и инструментов:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="audit_plan"
                            ref={inputs}
                            value={AuditPreparationAndPlanningData.audit_plan}
                            onChange={AuditPreparationAndPlanningChange}
                        />

                        <label className={"label-textarea"}>Назначение команды аудита и определение их ролей и
                            обязанностей:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="audit_team_and_roles"
                            ref={inputs}
                            value={AuditPreparationAndPlanningData.audit_team_and_roles}
                            onChange={AuditPreparationAndPlanningChange}
                        />

                        <button className={"metodology_sub"} onClick={AuditPreparationAndPlanningSubmit}>Сохранить
                        </button>
                    </details>
                </section>

                <section id="section2.1.8">
                    <h2 className={"title-h2"}>8. Выполнение аудита и тестирование</h2>
                    <details>
                        <summary>
                            <i class="fa fa-bars"></i>
                        </summary>
                        <label className={"label-textarea"}>Проведение активных тестов на проникновение, включая
                            сканирование уязвимостей и эксплуатацию:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="penetration_testing"
                            ref={inputs}
                            value={AuditExecutionAndTestingData.penetration_testing}
                            onChange={AuditExecutionAndTestingChange}
                        />

                        <label className={"label-textarea"}>Сбор и анализ данных, связанных с обнаружением и анализом
                            уязвимостей:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="vulnerability_data_collection_and_analysis"
                            ref={inputs}
                            value={AuditExecutionAndTestingData.vulnerability_data_collection_and_analysis}
                            onChange={AuditExecutionAndTestingChange}
                        />

                        <label className={"label-textarea"}>Тестирование политик безопасности, аутентификации и
                            авторизации:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="security_policy_testing"
                            ref={inputs}
                            value={AuditExecutionAndTestingData.security_policy_testing}
                            onChange={AuditExecutionAndTestingChange}
                        />

                        <button className={"metodology_sub"} onClick={AuditExecutionAndTestingSubmit}>Сохранить</button>
                    </details>
                </section>

                <section id="section2.1.9">
                    <h2 className={"title-h2"}>9. Анализ результатов и формирование отчета</h2>
                    <details>
                        <summary>
                            <i class="fa fa-bars"></i>
                        </summary>
                        <label className={"label-textarea"}>Обработка данных, полученных в результате тестирования и
                            анализа уязвимостей:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="data_processing"
                            ref={inputs}
                            value={ResultsAnalysisAndReportingData.data_processing}
                            onChange={ResultsAnalysisAndReportingChange}
                        />

                        <label className={"label-textarea"}>Оценка уровня риска и потенциальных угроз для
                            клиента:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="risk_assessment"
                            ref={inputs}
                            value={ResultsAnalysisAndReportingData.risk_assessment}
                            onChange={ResultsAnalysisAndReportingChange}
                        />

                        <label className={"label-textarea"}>Формирование подробного отчета о результатах аудита с
                            рекомендациями по устранению уязвимостей:</label>
                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="detailed_audit_report_with_recommendations"
                            ref={inputs}
                            value={ResultsAnalysisAndReportingData.detailed_audit_report_with_recommendations}
                            onChange={ResultsAnalysisAndReportingChange}
                        />

                        <button className={"metodology_sub"} onClick={ResultsAnalysisAndReportingSubmit}>Сохранить
                        </button>
                    </details>
                </section>

            </details>

        </section>
    );
};

export default PTES;