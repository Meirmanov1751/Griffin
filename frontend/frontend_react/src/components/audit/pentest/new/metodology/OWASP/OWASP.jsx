import React, {useRef, useState} from 'react';
import instance from "../../../../../../store/api";
import XSS from "../../tests/xss/xss";
import CSRF from "../../tests/csrf/csrf";
import SqlInjection from "../../tests/sqlInjection/sqlInjection";
import Clickjacking from "../../tests/clickjacking/clickjacking";
import {useParams} from "react-router-dom";
import {useSelector} from "react-redux";
import {useEffect} from "react";

const OWASP = (pentest) => {
    var {id} = useParams()
    let pentestState = useSelector(state => state.pentests.pentest)
    let [pentetsForProps, setPentetsForProps] = useState({})

    async function getPentest() {
        try {
            const response = await instance.get('api/pentesting/pentesting/' + id + '/');
            // Обработка успешного ответа от сервера
            setPentetsForProps(response.data)
            console.log(response.data);
            if (response.data.OWASP_injection) {
                getInjection(response.data.OWASP_injection)
            }
            if (response.data.OWASP_AuthenticationViolation) {
                getAuthenticationViolation(response.data.OWASP_AuthenticationViolation)
            }
            if (response.data.OWASP_SensitiveDataExposure) {
                getSensitiveDataExposure(response.data.OWASP_SensitiveDataExposure)
            }
            if (response.data.OWASP_XXEViolation) {
                getXXEViolation(response.data.OWASP_XXEViolation)
            }
            if (response.data.OWASP_AccessControlViolation) {
                getAccessControlViolation(response.data.OWASP_AccessControlViolation)
            }
            if (response.data.OWASP_SecurityMisconfiguration) {
                getSecurityMisconfiguration(response.data.OWASP_SecurityMisconfiguration)
            }
            if (response.data.OWASP_XSSAttack) {
                getXSSAttack(response.data.OWASP_XSSAttack)
            }
            if (response.data.OWASP_InsecureDeserializationAttack) {
                getInsecureDeserializationAttack(response.data.OWASP_InsecureDeserializationAttack)
            }
            if (response.data.OWASP_KnownVulnerabilities) {
                getKnownVulnerabilities(response.data.OWASP_KnownVulnerabilities)
            }
            if (response.data.OWASP_SecurityLogging) {
                getSecurityLogging(response.data.OWASP_SecurityLogging)
            }

        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }

    useEffect(() => {
        if (id) {
            getPentest()
        }
    }, [])

    const inputs = useRef(null);

    //1//////////////////////////////////////////////////////////////////////////////////////////////////////////
    const [InjectionData, setInjectionData] = useState({
        sql_injection: '',
        cross_site_scripting: null,
        xml_injection: '',
        command_injection: '',
        ldap_injection: '',
        nosql_injection: '',
        server_side_template_injection: '',
    });

    async function getInjection(audit) {
        try {
            const response = await instance.get('api/OWASP/Injection/' + audit.id + '/');
            // Обработка успешного ответа от сервера
            setInjectionData(response.data)

            console.log(response.data);

        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }


    const InjectionSubmit = async (e) => {
        e.preventDefault();

        if (pentetsForProps.OWASP_injection) {
            try {
                const response = await instance.put('api/OWASP/Injection/' + pentetsForProps.OWASP_injection.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, InjectionData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
        } else {
            try {
                const response = await instance.post('api/OWASP/Injection/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, InjectionData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
            console.log(InjectionData)
        }
    }

    const InjectionChange = (e) => {
        const {name, value} = e.target;
        setInjectionData({
            ...InjectionData,
            [name]: value,
        });
    };

    ///2////////////////////////////////////////////////////////////////////

    const [AuthenticationViolationData, setAuthenticationViolationData] = useState({
        insufficient_authentication: '',
        insecure_session_management: null,
        no_session_timeout: '',
        session_information_leakage: '',
        weak_passwords: '',
    });

    async function getAuthenticationViolation(audit) {
        try {
            const response = await instance.get('api/OWASP/AuthenticationViolation/' + audit.id + '/');
            // Обработка успешного ответа от сервера
            setAuthenticationViolationData(response.data)


        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }

    const AuthenticationViolationSubmit = async (e) => {
        e.preventDefault();
        if (pentetsForProps.OWASP_AuthenticationViolation) {
            try {
                const response = await instance.put('api/OWASP/AuthenticationViolation/' + pentetsForProps.OWASP_AuthenticationViolation.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, AuthenticationViolationData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
        } else {
            try {
                const response = await instance.post('api/OWASP/AuthenticationViolation/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, AuthenticationViolationData), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });
                // Обработка успешного ответа от сервера
            } catch (error) {
                // Обработка ошибок при отправке запроса
                alert(error + 'Вы уже сохранили');
            }
            console.log(AuthenticationViolationData)
        }
    }


    const AuthenticationViolationChange = (e) => {
        const {name, value} = e.target;
        setAuthenticationViolationData({
            ...AuthenticationViolationData,
            [name]: value,
        });
    };

    ///3////////////////////////////////////////////////////////////////////

    const [SensitiveDataExposureData, setSensitiveDataExposureData] = useState({
        insufficient_data_encryption: '',
        weak_encryption_algorithms: null,
        insecure_password_storage: '',
        lack_of_authentication_for_sensitive_data_access: '',
        lack_of_access_control_and_secure_api_authentication: '',
    });

    async function getSensitiveDataExposure(audit) {
        try {
            const response = await instance.get('api/OWASP/SensitiveDataExposure/' + audit.id + '/');
            // Обработка успешного ответа от сервера
            setSensitiveDataExposureData(response.data)

        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }

    const SensitiveDataExposureSubmit = async (e) => {
        e.preventDefault();
            if (pentetsForProps.OWASP_SensitiveDataExposure) {
                try {
                    const response = await instance.put('api/OWASP/SensitiveDataExposure/' + pentetsForProps.OWASP_SensitiveDataExposure.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, SensitiveDataExposureData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
            } else {
                try {
                    const response = await instance.post('api/OWASP/SensitiveDataExposure/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, SensitiveDataExposureData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
                console.log(SensitiveDataExposureData)
            }
        }

        const SensitiveDataExposureChange = (e) => {
            const {name, value} = e.target;
            setSensitiveDataExposureData({
                ...SensitiveDataExposureData,
                [name]: value,
            });
        };

        //////4/////////////////////////////////////////////////////////////////

        const [XXEViolationData, setXXEViolationData] = useState({
            external_xml_entities: '',
            incorrect_data_filtering: null,
            remote_file_system_access: '',
            requests_to_external_resources: '',
            data_processing_overload: '',
        });

        async function getXXEViolation(audit) {
            try {
                const response = await instance.get('api/OWASP/XXEViolation/' + audit.id + '/');
                // Обработка успешного ответа от сервера
                setXXEViolationData(response.data)
                debugger
                console.log(response.data);

            } catch (error) {
                // Обработка ошибок при отправке запроса
                console.error(error);
            }
        }

        const XXEViolationSubmit = async (e) => {
            e.preventDefault();
            if (pentetsForProps.OWASP_XXEViolation) {
                try {
                    const response = await instance.put('api/OWASP/XXEViolation/' + pentetsForProps.OWASP_XXEViolation.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, XXEViolationData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
            } else {
                try {
                    const response = await instance.post('api/OWASP/XXEViolation/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, XXEViolationData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
                console.log(XXEViolationData)
            }
        }

        const XXEViolationChange = (e) => {
            const {name, value} = e.target;
            setXXEViolationData({
                ...XXEViolationData,
                [name]: value,
            });
        };

        //////5/////////////////////////////////////////////////////////////////

        const [AccessControlViolationData, setAccessControlViolationData] = useState({
            insufficient_role_and_permissions_separation: '',
            insufficient_data_access_control: null,
            lack_of_privilege_escalation_protection: '',
        });

        async function getAccessControlViolation(audit) {
            try {
                const response = await instance.get('api/OWASP/AccessControlViolation/' + audit.id + '/');
                // Обработка успешного ответа от сервера
                setAccessControlViolationData(response.data)
;

            } catch (error) {
                // Обработка ошибок при отправке запроса
                console.error(error);
            }
        }

        const AccessControlViolationSubmit = async (e) => {
            e.preventDefault();
            if (pentetsForProps.OWASP_AccessControlViolation) {
                try {
                    const response = await instance.put('api/OWASP/AccessControlViolation/' + pentetsForProps.OWASP_XXEViolation.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, AccessControlViolationData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
            } else {
                try {
                    const response = await instance.post('api/OWASP/AccessControlViolation/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, AccessControlViolationData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
                console.log(AccessControlViolationData)
            }
        }

        const AccessControlViolationChange = (e) => {
            const {name, value} = e.target;
            setAccessControlViolationData({
                ...AccessControlViolationData,
                [name]: value,
            });
        };

        //////6/////////////////////////////////////////////////////////////////

        const [SecurityMisconfigurationData, setSecurityMisconfigurationData] = useState({
            open_ports_and_services: '',
            default_passwords_and_accounts: null,
            insufficient_directory_and_file_protection: '',
            poorly_configured_databases: '',
            web_application_vulnerabilities: '',
            information_leakage: '',
        });

        async function getSecurityMisconfiguration(audit) {
            try {
                const response = await instance.get('api/OWASP/SecurityMisconfiguration/' + audit.id + '/');
                // Обработка успешного ответа от сервера
                setSecurityMisconfigurationData(response.data)
                debugger
                console.log(response.data);

            } catch (error) {
                // Обработка ошибок при отправке запроса
                console.error(error);
            }
        }

        const SecurityMisconfigurationSubmit = async (e) => {
            e.preventDefault();
            if (pentetsForProps.OWASP_SecurityMisconfiguration) {
                try {
                    const response = await instance.put('api/OWASP/SecurityMisconfiguration/' + pentetsForProps.OWASP_SecurityMisconfiguration.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, SecurityMisconfigurationData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
            } else {
                try {
                    const response = await instance.post('api/OWASP/SecurityMisconfiguration/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, SecurityMisconfigurationData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
                console.log(SecurityMisconfigurationData)
            }
        }

        const SecurityMisconfigurationChange = (e) => {
            const {name, value} = e.target;
            setSecurityMisconfigurationData({
                ...SecurityMisconfigurationData,
                [name]: value,
            });
        };

        ////////7///////////////////////////////////////////////////////////////

        const [XSSAttackData, setXSSAttackData] = useState({
            information_leakage: '',
            stored_xss: null,
            dom_based_xss: '',
            blind_xss: '',
            xss_via_external_resources: '',
        });

        async function getXSSAttack(audit) {
            try {
                const response = await instance.get('api/OWASP/XSSAttack/' + audit.id + '/');
                // Обработка успешного ответа от сервера
                setXSSAttackData(response.data)


            } catch (error) {
                // Обработка ошибок при отправке запроса
                console.error(error);
            }
        }

        const XSSAttackSubmit = async (e) => {
            e.preventDefault();
            if (pentetsForProps.OWASP_XSSAttack) {
                try {
                    const response = await instance.put('api/OWASP/XSSAttack/' + pentetsForProps.OWASP_XSSAttack.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, XSSAttackData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
            } else {
                try {
                    const response = await instance.post('api/OWASP/XSSAttack/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, XSSAttackData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
                console.log(XSSAttackData)
            }
        }

        const XSSAttackChange = (e) => {
            const {name, value} = e.target;
            setXSSAttackData({
                ...XSSAttackData,
                [name]: value,
            });
        };

        ////////8///////////////////////////////////////////////////////////////

        const [InsecureDeserializationAttackData, setInsecureDeserializationAttackData] = useState({
            deserialization_without_data_check: '',
            malicious_code_execution: null,
            data_modification: '',
            session_and_authentication_attacks: '',
            denial_of_service: '',
        });

        async function getInsecureDeserializationAttack(audit) {
            try {
                const response = await instance.get('api/OWASP/InsecureDeserializationAttack/' + audit.id + '/');
                // Обработка успешного ответа от сервера
                setInsecureDeserializationAttackData(response.data)
                debugger
                console.log(response.data);

            } catch (error) {
                // Обработка ошибок при отправке запроса
                console.error(error);
            }
        }

        const InsecureDeserializationAttackSubmit = async (e) => {
            e.preventDefault();
            if (pentetsForProps.OWASP_InsecureDeserializationAttack) {
                try {
                    const response = await instance.put('api/OWASP/InsecureDeserializationAttack/' + pentetsForProps.OWASP_InsecureDeserializationAttack.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, InsecureDeserializationAttackData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
            } else {
                try {
                    const response = await instance.post('api/OWASP/InsecureDeserializationAttack/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, InsecureDeserializationAttackData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
                console.log(InsecureDeserializationAttackData)
            }
        }

        const InsecureDeserializationAttackChange = (e) => {
            const {name, value} = e.target;
            setInsecureDeserializationAttackData({
                ...InsecureDeserializationAttackData,
                [name]: value,
            });
        };

        ///////9////////////////////////////////////////////////////////////////

        const [KnownVulnerabilitiesData, setKnownVulnerabilitiesData] = useState({
            outdated_component_versions: '',
            lack_of_update_monitoring: null,
            components_with_known_vulnerabilities: '',
            version_information_leakage: '',
            cascading_impact: '',
        });

        async function getKnownVulnerabilities(audit) {
            try {
                const response = await instance.get('api/OWASP/KnownVulnerabilities/' + audit.id + '/');
                // Обработка успешного ответа от сервера
                setKnownVulnerabilitiesData(response.data)


            } catch (error) {
                // Обработка ошибок при отправке запроса
                console.error(error);
            }
        }

        const KnownVulnerabilitiesSubmit = async (e) => {
            e.preventDefault();
            if (pentetsForProps.OWASP_KnownVulnerabilities) {
                try {
                    const response = await instance.put('api/OWASP/KnownVulnerabilities/' + pentetsForProps.OWASP_KnownVulnerabilities.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, KnownVulnerabilitiesData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
            } else {
                try {
                    const response = await instance.post('api/OWASP/KnownVulnerabilities/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, KnownVulnerabilitiesData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
                console.log(KnownVulnerabilitiesData)
            }
        }

        const KnownVulnerabilitiesChange = (e) => {
            const {name, value} = e.target;
            setKnownVulnerabilitiesData({
                ...KnownVulnerabilitiesData,
                [name]: value,
            });
        };

        ///////10////////////////////////////////////////////////////////////////

        const [SecurityLoggingData, setSecurityLoggingData] = useState({
            data_processing: '',
            risk_assessment: null,
            detailed_audit_report_with_recommendations: '',
        });

        async function getSecurityLogging(audit) {
            try {
                const response = await instance.get('api/OWASP/SecurityLogging/' + audit.id + '/');
                // Обработка успешного ответа от сервера
                setSecurityLoggingData(response.data)
                debugger
                console.log(response.data);

            } catch (error) {
                // Обработка ошибок при отправке запроса
                console.error(error);
            }
        }

        const SecurityLoggingSubmit = async (e) => {
            e.preventDefault();
            if (pentetsForProps.OWASP_SecurityLogging) {
                try {
                    const response = await instance.put('api/OWASP/SecurityLogging/' + pentetsForProps.OWASP_SecurityLogging.id + '/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, SecurityLoggingData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
            } else {
                try {
                    const response = await instance.post('api/OWASP/SecurityLogging/', Object.assign({pentest: localStorage.getItem('pentestNewId')}, SecurityLoggingData), {
                        headers: {
                            'Content-Type': 'multipart/form-data',
                        }
                    });
                    // Обработка успешного ответа от сервера
                } catch (error) {
                    // Обработка ошибок при отправке запроса
                    alert(error + 'Вы уже сохранили');
                }
                console.log(SecurityLoggingData)
            }
        }

        const SecurityLoggingChange = (e) => {
            const {name, value} = e.target;
            setSecurityLoggingData({
                ...SecurityLoggingData,
                [name]: value,
            });
        };

        return (
            <section id="section2.2">
                <h1 className={"title-h2"}>OWASP</h1>
                <details className={"details-main"} open>
                    <summary className={"summary-main"}>
                        <i className="fa fa-sliders"></i>
                    </summary>
                    <section id="section2.2.1">
                        <h2 className={"title-h2"}>1. Инъекции :</h2>
                        <details>
                            <summary>
                                <i class="fa fa-bars"></i>
                            </summary>
                            <Clickjacking/>
                            <label className={"label-textarea"}>SQL Injection:</label>



                            <SqlInjection/>

                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="sql_injection"
                                ref={inputs}
                                value={InjectionData.sql_injection}
                                onChange={InjectionChange}
                            />

                            <label className={"label-textarea"}>Cross-Site Scripting:</label>
                            <XSS/>
                            <CSRF/>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="cross_site_scripting"
                                ref={inputs}
                                value={InjectionData.cross_site_scripting}
                                onChange={InjectionChange}
                            />

                            <label className={"label-textarea"}>XML Injection:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="xml_injection"
                                ref={inputs}
                                value={InjectionData.xml_injection}
                                onChange={InjectionChange}
                            />

                            <label className={"label-textarea"}>Command Injection:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="command_injection"
                                ref={inputs}
                                value={InjectionData.command_injection}
                                onChange={InjectionChange}
                            />

                            <label className={"label-textarea"}>LDAP Injection:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="ldap_injection"
                                ref={inputs}
                                value={InjectionData.ldap_injection}
                                onChange={InjectionChange}
                            />

                            <label className={"label-textarea"}>NoSQL Injection:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="nosql_injection"
                                ref={inputs}
                                value={InjectionData.nosql_injection}
                                onChange={InjectionChange}
                            />

                            <label className={"label-textarea"}>Server-Side Template Injection:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="server_side_template_injection"
                                ref={inputs}
                                value={InjectionData.server_side_template_injection}
                                onChange={InjectionChange}
                            />

                            <button className={"metodology_sub"} onClick={InjectionSubmit}>Сохранить</button>
                        </details>
                    </section>

                    <section id="section2.2.2">
                        <h2 className={"title-h2"}>2. Нарушенная аутентификация :</h2>
                        <details>
                            <summary>
                                <i class="fa fa-bars"></i>
                            </summary>
                            <label className={"label-textarea"}>Недостаточная или отсутствующая аутентификация:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="insufficient_authentication"
                                ref={inputs}
                                value={AuthenticationViolationData.insufficient_authentication}
                                onChange={AuthenticationViolationChange}
                            />

                            <label className={"label-textarea"}>Ненадежное управление сессиями:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="insecure_session_management"
                                ref={inputs}
                                value={AuthenticationViolationData.insecure_session_management}
                                onChange={AuthenticationViolationChange}
                            />

                            <label className={"label-textarea"}>Отсутствие времени ограничения сессии:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="no_session_timeout"
                                ref={inputs}
                                value={AuthenticationViolationData.no_session_timeout}
                                onChange={AuthenticationViolationChange}
                            />

                            <label className={"label-textarea"}>Утечки информации о сессиях:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="session_information_leakage"
                                ref={inputs}
                                value={AuthenticationViolationData.session_information_leakage}
                                onChange={AuthenticationViolationChange}
                            />

                            <label className={"label-textarea"}>Слабые пароли и недостаточная защита паролей:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="weak_passwords"
                                ref={inputs}
                                value={AuthenticationViolationData.weak_passwords}
                                onChange={AuthenticationViolationChange}
                            />

                            <button className={"metodology_sub"} onClick={AuthenticationViolationSubmit}>Сохранить
                            </button>
                        </details>
                    </section>

                    <section id="section2.2.3">
                        <h2 className={"title-h2"}>3. Раскрытие критически важных данных</h2>
                        <details>
                            <summary>
                                <i class="fa fa-bars"></i>
                            </summary>
                            <label className={"label-textarea"}>Недостаточное шифрование данных:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="insufficient_data_encryption"
                                ref={inputs}
                                value={SensitiveDataExposureData.insufficient_data_encryption}
                                onChange={SensitiveDataExposureChange}
                            />

                            <label className={"label-textarea"}>Слабые алгоритмы шифрования:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="weak_encryption_algorithms"
                                ref={inputs}
                                value={SensitiveDataExposureData.weak_encryption_algorithms}
                                onChange={SensitiveDataExposureChange}
                            />

                            <label className={"label-textarea"}>Хранение паролей в ненадежной форме:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="insecure_password_storage"
                                ref={inputs}
                                value={SensitiveDataExposureData.insecure_password_storage}
                                onChange={SensitiveDataExposureChange}
                            />

                            <label className={"label-textarea"}>Отсутствие аутентификации при доступе к чувствительным
                                данным:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="lack_of_authentication_for_sensitive_data_access"
                                ref={inputs}
                                value={SensitiveDataExposureData.lack_of_authentication_for_sensitive_data_access}
                                onChange={SensitiveDataExposureChange}
                            />

                            <label className={"label-textarea"}>Отсутствие контроля доступа и надежной аутентификации
                                API:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="lack_of_access_control_and_secure_api_authentication"
                                ref={inputs}
                                value={SensitiveDataExposureData.lack_of_access_control_and_secure_api_authentication}
                                onChange={SensitiveDataExposureChange}
                            />

                            <button className={"metodology_sub"} onClick={SensitiveDataExposureSubmit}>Сохранить
                            </button>
                        </details>
                    </section>

                    <section id="section2.2.4">
                        <h2 className={"title-h2"}>4. Внешние объекты XML (XXE)</h2>
                        <details>
                            <summary>
                                <i class="fa fa-bars"></i>
                            </summary>
                            <label className={"label-textarea"}>Внешние сущности XML:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="external_xml_entities"
                                ref={inputs}
                                value={XXEViolationData.external_xml_entities}
                                onChange={XXEViolationChange}
                            />

                            <label className={"label-textarea"}>Некорректная фильтрация данных:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="incorrect_data_filtering"
                                ref={inputs}
                                value={XXEViolationData.incorrect_data_filtering}
                                onChange={XXEViolationChange}
                            />

                            <label className={"label-textarea"}>Удаленный доступ к файловой системе:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="remote_file_system_access"
                                ref={inputs}
                                value={XXEViolationData.remote_file_system_access}
                                onChange={XXEViolationChange}
                            />

                            <label className={"label-textarea"}>Отправка запросов к внешним ресурсам:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="requests_to_external_resources"
                                ref={inputs}
                                value={XXEViolationData.requests_to_external_resources}
                                onChange={XXEViolationChange}
                            />

                            <label className={"label-textarea"}>Ускорение обработки данных:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="data_processing_overload"
                                ref={inputs}
                                value={XXEViolationData.data_processing_overload}
                                onChange={XXEViolationChange}
                            />

                            <button className={"metodology_sub"} onClick={XXEViolationSubmit}>Сохранить</button>
                        </details>
                    </section>

                    <section id="section2.2.5">
                        <h2 className={"title-h2"}>5. Нарушенный контроль доступа </h2>
                        <details>
                            <summary>
                                <i class="fa fa-bars"></i>
                            </summary>
                            <label className={"label-textarea"}>Недостаточное разделение ролей и прав:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="insufficient_role_and_permissions_separation"
                                ref={inputs}
                                value={AccessControlViolationData.insufficient_role_and_permissions_separation}
                                onChange={AccessControlViolationChange}
                            />

                            <label className={"label-textarea"}>Недостаточный контроль доступа к данным:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="insufficient_data_access_control"
                                ref={inputs}
                                value={AccessControlViolationData.insufficient_data_access_control}
                                onChange={AccessControlViolationChange}
                            />

                            <label className={"label-textarea"}>Отсутствие защиты от повышения привилегий:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="lack_of_privilege_escalation_protection"
                                ref={inputs}
                                value={AccessControlViolationData.lack_of_privilege_escalation_protection}
                                onChange={AccessControlViolationChange}
                            />

                            <button className={"metodology_sub"} onClick={AccessControlViolationSubmit}>Сохранить
                            </button>
                        </details>
                    </section>

                    <section id="section2.2.6">
                        <h2 className={"title-h2"}>6. Неправильная конфигурация безопасности </h2>
                        <details>
                            <summary>
                                <i class="fa fa-bars"></i>
                            </summary>
                            <label className={"label-textarea"}>Открытые порты и службы:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="open_ports_and_services"
                                ref={inputs}
                                value={SecurityMisconfigurationData.open_ports_and_services}
                                onChange={SecurityMisconfigurationChange}
                            />

                            <label className={"label-textarea"}>Стандартные пароли и учетные записи:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="default_passwords_and_accounts"
                                ref={inputs}
                                value={SecurityMisconfigurationData.default_passwords_and_accounts}
                                onChange={SecurityMisconfigurationChange}
                            />

                            <label className={"label-textarea"}>Недостаточная защита каталогов и файлов:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="insufficient_directory_and_file_protection"
                                ref={inputs}
                                value={SecurityMisconfigurationData.insufficient_directory_and_file_protection}
                                onChange={SecurityMisconfigurationChange}
                            />

                            <label className={"label-textarea"}>Плохая настройка баз данных:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="poorly_configured_databases"
                                ref={inputs}
                                value={SecurityMisconfigurationData.poorly_configured_databases}
                                onChange={SecurityMisconfigurationChange}
                            />

                            <label className={"label-textarea"}>Уязвимости в веб-приложениях:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="web_application_vulnerabilities"
                                ref={inputs}
                                value={SecurityMisconfigurationData.web_application_vulnerabilities}
                                onChange={SecurityMisconfigurationChange}
                            />

                            <label className={"label-textarea"}>Утечка информации:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="information_leakage"
                                ref={inputs}
                                value={SecurityMisconfigurationData.information_leakage}
                                onChange={SecurityMisconfigurationChange}
                            />

                            <button className={"metodology_sub"} onClick={SecurityMisconfigurationSubmit}>Сохранить
                            </button>
                        </details>
                    </section>

                    <section id="section2.2.7">
                        <h2 className={"title-h2"}>7. Межсайтовй скриптинг (XSS) </h2>
                        <details>
                            <summary>
                                <i class="fa fa-bars"></i>
                            </summary>
                            <XSS/>
                            <CSRF/>

                            <label className={"label-textarea"}>Отраженный (Reflected) XSS:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="reflected_xss"
                                ref={inputs}
                                value={XSSAttackData.reflected_xss}
                                onChange={XSSAttackChange}
                            />

                            <label className={"label-textarea"}>Постоянный (Stored) XSS:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="stored_xss"
                                ref={inputs}
                                value={XSSAttackData.stored_xss}
                                onChange={XSSAttackChange}
                            />

                            <label className={"label-textarea"}>DOM-based XSS:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="dom_based_xss"
                                ref={inputs}
                                value={XSSAttackData.dom_based_xss}
                                onChange={XSSAttackChange}
                            />

                            <label className={"label-textarea"}>Blind XSS:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="blind_xss"
                                ref={inputs}
                                value={XSSAttackData.blind_xss}
                                onChange={XSSAttackChange}
                            />

                            <label className={"label-textarea"}>XSS через внешние ресурсы (XSS via External
                                Resources):</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="xss_via_external_resources"
                                ref={inputs}
                                value={XSSAttackData.xss_via_external_resources}
                                onChange={XSSAttackChange}
                            />

                            <button className={"metodology_sub"} onClick={XSSAttackSubmit}>Сохранить</button>
                        </details>
                    </section>

                    <section id="section2.2.8">
                        <h2 className={"title-h2"}>8. Небезопасная десериализация </h2>
                        <details>
                            <summary>
                                <i class="fa fa-bars"></i>
                            </summary>
                            <label className={"label-textarea"}>Десериализация без проверки данных:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="deserialization_without_data_check"
                                ref={inputs}
                                value={InsecureDeserializationAttackData.deserialization_without_data_check}
                                onChange={InsecureDeserializationAttackChange}
                            />

                            <label className={"label-textarea"}>Выполнение вредоносного кода:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="malicious_code_execution"
                                ref={inputs}
                                value={InsecureDeserializationAttackData.malicious_code_execution}
                                onChange={InsecureDeserializationAttackChange}
                            />

                            <label className={"label-textarea"}>Изменение данных:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="data_modification"
                                ref={inputs}
                                value={InsecureDeserializationAttackData.data_modification}
                                onChange={InsecureDeserializationAttackChange}
                            />

                            <label className={"label-textarea"}>Атаки на сессии и авторизацию:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="session_and_authentication_attacks"
                                ref={inputs}
                                value={InsecureDeserializationAttackData.session_and_authentication_attacks}
                                onChange={InsecureDeserializationAttackChange}
                            />

                            <label className={"label-textarea"}>Отказ в обслуживании (DoS):</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="denial_of_service"
                                ref={inputs}
                                value={InsecureDeserializationAttackData.denial_of_service}
                                onChange={InsecureDeserializationAttackChange}
                            />

                            <button className={"metodology_sub"} onClick={InsecureDeserializationAttackSubmit}>Сохранить
                            </button>
                        </details>
                    </section>

                    <section id="section2.2.9">
                        <h2 className={"title-h2"}>9. Использование компонентов с известными уязвимостями </h2>
                        <details>
                            <summary>
                                <i class="fa fa-bars"></i>
                            </summary>
                            <label className={"label-textarea"}>Использование устаревших версий компонентов:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="outdated_component_versions"
                                ref={inputs}
                                value={KnownVulnerabilitiesData.outdated_component_versions}
                                onChange={KnownVulnerabilitiesChange}
                            />

                            <label className={"label-textarea"}>Отсутствие мониторинга обновлений:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="lack_of_update_monitoring"
                                ref={inputs}
                                value={KnownVulnerabilitiesData.lack_of_update_monitoring}
                                onChange={KnownVulnerabilitiesChange}
                            />

                            <label className={"label-textarea"}>Использование компонентов с известными
                                уязвимостями:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="components_with_known_vulnerabilities"
                                ref={inputs}
                                value={KnownVulnerabilitiesData.components_with_known_vulnerabilities}
                                onChange={KnownVulnerabilitiesChange}
                            />

                            <label className={"label-textarea"}>Утечка информации о версиях компонентов:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="version_information_leakage"
                                ref={inputs}
                                value={KnownVulnerabilitiesData.version_information_leakage}
                                onChange={KnownVulnerabilitiesChange}
                            />

                            <label className={"label-textarea"}>Каскадное воздействие:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="cascading_impact"
                                ref={inputs}
                                value={KnownVulnerabilitiesData.cascading_impact}
                                onChange={KnownVulnerabilitiesChange}
                            />

                            <button className={"metodology_sub"} onClick={KnownVulnerabilitiesSubmit}>Сохранить</button>
                        </details>
                    </section>

                    <section id="section2.2.10">
                        <h2 className={"title-h2"}>10. Недостаточно подробные журналы и слабый мониторинг </h2>
                        <details>
                            <summary>
                                <i class="fa fa-bars"></i>
                            </summary>
                            <label className={"label-textarea"}>Недостаточное журналирование событий:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="insufficient_event_logging"
                                ref={inputs}
                                value={SecurityLoggingData.insufficient_event_logging}
                                onChange={SecurityLoggingChange}
                            />

                            <label className={"label-textarea"}>Отсутствие алармов и оповещений:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="lack_of_alerts_and_notifications"
                                ref={inputs}
                                value={SecurityLoggingData.lack_of_alerts_and_notifications}
                                onChange={SecurityLoggingChange}
                            />

                            <label className={"label-textarea"}>Задержка в обнаружении инцидентов:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="delay_in_incident_detection"
                                ref={inputs}
                                value={SecurityLoggingData.delay_in_incident_detection}
                                onChange={SecurityLoggingChange}
                            />

                            <label className={"label-textarea"}>Недостаточное сохранение журналов:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="insufficient_log_retention"
                                ref={inputs}
                                value={SecurityLoggingData.insufficient_log_retention}
                                onChange={SecurityLoggingChange}
                            />

                            <label className={"label-textarea"}>Отсутствие аналитики безопасности:</label>
                            <textarea
                                className={"Osint_textarea"}
                                type={"search"}
                                name="absence_of_security_analytics"
                                ref={inputs}
                                value={SecurityLoggingData.absence_of_security_analytics}
                                onChange={SecurityLoggingChange}
                            />

                            <button className={"metodology_sub"} onClick={SecurityLoggingSubmit}>Сохранить</button>
                        </details>
                    </section>
                </details>
            </section>
        );
    };

    export default OWASP;