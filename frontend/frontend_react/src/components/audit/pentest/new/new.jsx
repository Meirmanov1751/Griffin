import React, {useEffect, useRef, useState} from 'react';
import instance from "../../../../store/api";
import OWASP from "./metodology/OWASP/OWASP";
import CommandConsole from "../../../cmd kali linux/CommandConsole";
import PTES from "./metodology/PTES/PTES";
import Navbar from "./navbar/navbar";
import {useParams} from "react-router-dom";
import Pcopt from "./PCOPT";
import Whois from "./tests/whois/whois";
import Lookup from "./tests/lookup/lookup";
import OpenPorts from "./tests/open_ports/openPorts";
import Logs from "./tests/logs/logs";

const PentestNew = () => {
    let {id} = useParams()
    if (id) {
        localStorage.setItem('pentestNewId', id)
    } else {
        localStorage.setItem('pentestNewId', '')
    }

    const [formData, setFormData] = useState({
        osint: 1,
        project: 1,
        organizationName: '',
        document: null,
        personName: '',
        goalsAndTasks: '',
        dataCollection: '',
        dataFilteringAndAnalysis: '',
        dataStorage: '',
        url: '',
    });
    const [osint, setOsint] = useState([])
    const inputs = useRef(null);

    const handleChange = (e) => {
        const {name, value} = e.target;
        setFormData({
            ...formData, [name]: value,
        });
    };
    const handleFileChange = (e) => {
        setFormData({
            ...formData, document: e.target.files[0],
        });
    };

    const [data, setData] = useState("")
    const [activePt, setActivePt] = useState(false)

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!id) {
            try {
                const response = await instance.post('api/pentesting/pentesting/', Object.assign({}, formData, data), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });

                // Обработка успешного ответа от сервера
                console.log(response.data);
                localStorage.setItem('pentestNewId', response.data.id)
                setActivePt(true)
            } catch (error) {
                // Обработка ошибок при отправке запроса
                console.error(error);
            }
        } else {
            try {
                const response = await instance.put('api/pentesting/pentesting/' + id + '/', Object.assign({}, formData, data), {
                    headers: {
                        'Content-Type': 'multipart/form-data',
                    }
                });

                // Обработка успешного ответа от сервера
                console.log(response.data);
            } catch (error) {
                // Обработка ошибок при отправке запроса
                console.error(error);
            }
        }

        console.log(formData)
        console.log(data)
    };
    const [isConsoleVisible, setIsConsoleVisible] = useState(false);
    const [isDragAndDropVisible, setIsDragAndDropVisible] = useState(false);

    const toggleConsole = () => {
        setIsConsoleVisible(!isConsoleVisible);
        setIsDragAndDropVisible(false); // Скрыть другой компонент
    };

    const toggleDragAndDrop = () => {
        setIsDragAndDropVisible(!isDragAndDropVisible);
        setIsConsoleVisible(false); // Скрыть другой компонент
    };

    const [project, setProject] = useState([])

    async function getProject() {
        const response = await instance.get('api/project/project/');
        setProject(response.data.results)
    }

    async function getOsint() {
        const response = await instance.get('api/osint/osint/');
        setOsint(response.data.results)
    }


    async function getPentest() {
        try {
            const response = await instance.get('api/pentesting/pentesting/' + id + '/');
            // Обработка успешного ответа от сервера
            setFormData(response.data)
            console.log(response.data);
            setActivePt(true)
        } catch (error) {
            // Обработка ошибок при отправке запроса
            console.error(error);
        }
    }

    useEffect(() => {
        if (id) {
            getPentest()
        }
        getOsint()
        getProject()
    }, [])

    return (<div>


            <form className={"form_pentest"} onSubmit={handleSubmit}>
                <div className={"navbar_pentest--div"}>
                    <Navbar/>
                </div>
                <div style={{width: '100%'}}>
                    <section className={"newStyle_container"}  id="section1">

                        <h2 className={"title-h1"}>Пасивная часть проверки.</h2>
                        <h3 className={"osint_subtitle"}>Osint:</h3>
                        <select name="project" className={'newStyle_select'} onChange={handleChange}>
                            {osint.map((os) => (<option key={os.id} value={os.id}>{os.organizationName}</option>))}
                        </select>
                        <h3 className={"osint_subtitle"}>Проект:</h3>
                        <select name="osint" className={'newStyle_select'} onChange={handleChange}>
                            {project.map((os) => (<option key={os.id} value={os.id}>{os.name}</option>))}
                        </select>


                        <Whois/>
                        <Lookup/>

                        <input
                            className={"Osint_input"}
                            type={"search"}
                            name="organizationName"
                            ref={inputs}
                            value={formData.organizationName}
                            onChange={handleChange}
                            placeholder={"Спец название пентеста"}
                        />
                        <input
                            className={"Osint_input"}
                            type={"search"}
                            name="personName"
                            ref={inputs}
                            value={formData.personName}
                            onChange={handleChange}
                            placeholder={"ФИО человека, который делал заказ"}
                        />

                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="goalsAndTasks"
                            ref={inputs}
                            value={formData.goalsAndTasks}
                            onChange={handleChange}
                            placeholder={"Определение целей и задач"}
                        />

                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="dataCollection"
                            ref={inputs}
                            value={formData.dataCollection}
                            onChange={handleChange}
                            placeholder={"Сбор данных"}
                        />

                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="dataFilteringAndAnalysis"
                            ref={inputs}
                            value={formData.dataFilteringAndAnalysis}
                            onChange={handleChange}
                            placeholder={"Фильтрация и анализ"}
                        />

                        <textarea
                            className={"Osint_textarea"}
                            type={"search"}
                            name="dataStorage"
                            ref={inputs}
                            value={formData.dataStorage}
                            onChange={handleChange}
                            placeholder={"Сохранение данных"}
                        />


                        <button className={"btn_add--req"}>Создать отчет по Pentest</button>
                    </section>
                    <section className={activePt ? "newStyle_container" : "newStyle_container disablePt"}  id="section2">
                        <h2 className={"title-h1"}>Активная часть проверки.</h2>
                        <OpenPorts/>
                        <Logs/>


                        <Pcopt/>
                        <div>
                            <h5 className={"osint_title"}>Методологии <i className="fa fa-bar-chart"></i></h5>
                            <PTES/>
                            <OWASP/>
                            {/*<ISSAF/>*/}
                        </div>
                    </section>


                </div>

                <details style={{position: 'fixed', bottom: '26px', left: '0',right: '7px' }} className={"details-terminal form_pentest--div"}>
                    <summary className={"summary-terminal"}>
                        <div onClick={toggleConsole}>
                            <div className="fa fa-window-maximize icon_terminal"
                                 aria-hidden="true"></div>
                            Инструменты
                        </div>
                        <div onClick={toggleConsole} className={"terminal_minimize"}>
                            <i className="fa fa-window-minimize" aria-hidden="true"></i>
                        </div>
                    </summary>
                    <div>
                        <div className="button_terminal--div">
                            <button className="button_terminal" onClick={toggleConsole}>
                                <div className="fa fa-terminal icon_terminal"
                                     aria-hidden="true"></div>
                                Терминал
                            </button>
                            <button className="button_terminal" onClick={toggleDragAndDrop}>
                                <div className="fa fa-download icon_terminal"
                                     aria-hidden="true"></div>
                                Загрузить документы
                            </button>
                        </div>

                        {isConsoleVisible && (<div>
                                <CommandConsole/>
                            </div>)}

                        {isDragAndDropVisible && (<div>
                                <div className="upload-container">
                                    <label className="label-upload" htmlFor="fileInput">
                                        Выберите документ
                                    </label>
                                    <input type="file" accept=".pdf,.doc,.docx" id="fileInput"
                                           onChange={handleFileChange}/>
                                    <div>Перетащите или нажмите, чтобы загрузить</div>
                                </div>
                            </div>)}
                    </div>
                </details>
            </form>
            <div>

            </div>

        </div>);
};

export default PentestNew;